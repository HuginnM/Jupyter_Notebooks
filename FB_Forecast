{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.9"},"papermill":{"default_parameters":{},"duration":120.85859,"end_time":"2021-05-10T17:58:16.434087","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2021-05-10T17:56:15.575497","version":"2.2.2"},"colab":{"name":"FB_Forecast","provenance":[]}},"cells":[{"cell_type":"markdown","metadata":{"papermill":{"duration":0.013388,"end_time":"2021-05-10T17:56:21.123693","exception":false,"start_time":"2021-05-10T17:56:21.110305","status":"completed"},"tags":[],"id":"C8p1O_TzfwQq"},"source":["# <div id=\"chap1\">1. Import libraries"]},{"cell_type":"code","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2021-05-10T17:56:21.156900Z","iopub.status.busy":"2021-05-10T17:56:21.156234Z","iopub.status.idle":"2021-05-10T17:56:27.720880Z","shell.execute_reply":"2021-05-10T17:56:27.719712Z"},"papermill":{"duration":6.584423,"end_time":"2021-05-10T17:56:27.721153","exception":false,"start_time":"2021-05-10T17:56:21.136730","status":"completed"},"tags":[],"id":"2k7EEzaVfwQq","executionInfo":{"status":"ok","timestamp":1621241101373,"user_tz":-180,"elapsed":4823,"user":{"displayName":"Артур Соболь","photoUrl":"","userId":"13392954308681420968"}}},"source":["import numpy as np\n","import pandas as pd\n","\n","import os\n","import matplotlib.pyplot as plt\n","import pandas_datareader as web\n","import datetime as dt\n","\n","from sklearn.preprocessing import MinMaxScaler\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, LSTM\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"papermill":{"duration":0.012549,"end_time":"2021-05-10T17:56:27.772416","exception":false,"start_time":"2021-05-10T17:56:27.759867","status":"completed"},"tags":[],"id":"UtJtddeIfwQr"},"source":["# <div id=\"chap2\">2. Preprocessing"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:56:27.803784Z","iopub.status.busy":"2021-05-10T17:56:27.803217Z","iopub.status.idle":"2021-05-10T17:56:27.806149Z","shell.execute_reply":"2021-05-10T17:56:27.805652Z"},"papermill":{"duration":0.021102,"end_time":"2021-05-10T17:56:27.806287","exception":false,"start_time":"2021-05-10T17:56:27.785185","status":"completed"},"tags":[],"id":"luGSP23zfwQr","executionInfo":{"status":"ok","timestamp":1621241144340,"user_tz":-180,"elapsed":1008,"user":{"displayName":"Артур Соболь","photoUrl":"","userId":"13392954308681420968"}}},"source":["def load_data(company, start, end):\n","    data = web.DataReader(company, 'yahoo', start, end)\n","    return data"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:56:27.837182Z","iopub.status.busy":"2021-05-10T17:56:27.836453Z","iopub.status.idle":"2021-05-10T17:56:27.839288Z","shell.execute_reply":"2021-05-10T17:56:27.838719Z"},"papermill":{"duration":0.019633,"end_time":"2021-05-10T17:56:27.839423","exception":false,"start_time":"2021-05-10T17:56:27.819790","status":"completed"},"tags":[],"id":"Rv4CZClMfwQs","executionInfo":{"status":"ok","timestamp":1621241146594,"user_tz":-180,"elapsed":1151,"user":{"displayName":"Артур Соболь","photoUrl":"","userId":"13392954308681420968"}}},"source":["# Company to be focused on: facebook\n","company = 'FB'"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:56:27.874755Z","iopub.status.busy":"2021-05-10T17:56:27.874165Z","iopub.status.idle":"2021-05-10T17:56:29.926984Z","shell.execute_reply":"2021-05-10T17:56:29.926302Z"},"papermill":{"duration":2.074534,"end_time":"2021-05-10T17:56:29.927143","exception":false,"start_time":"2021-05-10T17:56:27.852609","status":"completed"},"tags":[],"id":"4GjdQIpNfwQs","executionInfo":{"status":"ok","timestamp":1621241149145,"user_tz":-180,"elapsed":1949,"user":{"displayName":"Артур Соболь","photoUrl":"","userId":"13392954308681420968"}}},"source":["data = load_data(company = company,\n","                 start = dt.datetime(2012,1,1),\n","                 end = dt.datetime(2019,1,1))"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:56:29.956844Z","iopub.status.busy":"2021-05-10T17:56:29.956297Z","iopub.status.idle":"2021-05-10T17:56:29.961034Z","shell.execute_reply":"2021-05-10T17:56:29.961446Z"},"papermill":{"duration":0.020963,"end_time":"2021-05-10T17:56:29.961617","exception":false,"start_time":"2021-05-10T17:56:29.940654","status":"completed"},"tags":[],"id":"7-HO1zY6fwQs","executionInfo":{"status":"ok","timestamp":1621241150838,"user_tz":-180,"elapsed":907,"user":{"displayName":"Артур Соболь","photoUrl":"","userId":"13392954308681420968"}}},"source":["# Normalize data\n","scaler = MinMaxScaler(feature_range=(0,1))\n","scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1,1))"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:56:29.990977Z","iopub.status.busy":"2021-05-10T17:56:29.990347Z","iopub.status.idle":"2021-05-10T17:56:29.997764Z","shell.execute_reply":"2021-05-10T17:56:29.998191Z"},"papermill":{"duration":0.023425,"end_time":"2021-05-10T17:56:29.998356","exception":false,"start_time":"2021-05-10T17:56:29.974931","status":"completed"},"tags":[],"id":"J3yp8sDTfwQt","executionInfo":{"status":"ok","timestamp":1621241152997,"user_tz":-180,"elapsed":1336,"user":{"displayName":"Артур Соболь","photoUrl":"","userId":"13392954308681420968"}}},"source":["# how many days do i want to base my predictions on ?\n","prediction_days = 60\n","\n","x_train = []\n","y_train = []\n","\n","for x in range(prediction_days, len(scaled_data)):\n","    x_train.append(scaled_data[x - prediction_days:x, 0])\n","    y_train.append(scaled_data[x, 0])\n","    \n","x_train, y_train = np.array(x_train), np.array(y_train)\n","x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"papermill":{"duration":0.014256,"end_time":"2021-05-10T17:56:30.052789","exception":false,"start_time":"2021-05-10T17:56:30.038533","status":"completed"},"tags":[],"id":"FuVB7x4YfwQt"},"source":["# <div id=\"chap3\">3. Build LSTM model"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:56:30.135432Z","iopub.status.busy":"2021-05-10T17:56:30.134770Z","iopub.status.idle":"2021-05-10T17:56:30.139681Z","shell.execute_reply":"2021-05-10T17:56:30.140168Z"},"papermill":{"duration":0.021444,"end_time":"2021-05-10T17:56:30.140331","exception":false,"start_time":"2021-05-10T17:56:30.118887","status":"completed"},"tags":[],"id":"ewT17bXHfwQv","executionInfo":{"status":"ok","timestamp":1621241155658,"user_tz":-180,"elapsed":1610,"user":{"displayName":"Артур Соболь","photoUrl":"","userId":"13392954308681420968"}}},"source":["def LSTM_model():\n","    \n","    model = Sequential()\n","    \n","    model.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1],1)))\n","    model.add(Dropout(0.2))\n","\n","    model.add(LSTM(units = 50, return_sequences = True))\n","    model.add(Dropout(0.2))\n","\n","    model.add(LSTM(units = 50))\n","    model.add(Dropout(0.2))\n","    \n","    model.add(Dense(units=1))\n","    \n","    return model"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"papermill":{"duration":0.013769,"end_time":"2021-05-10T17:56:30.194808","exception":false,"start_time":"2021-05-10T17:56:30.181039","status":"completed"},"tags":[],"id":"rT2O0wHyfwQv"},"source":["# <div id=\"chap4\">4. Training"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:56:30.224767Z","iopub.status.busy":"2021-05-10T17:56:30.224160Z","iopub.status.idle":"2021-05-10T17:56:31.011509Z","shell.execute_reply":"2021-05-10T17:56:31.010146Z"},"papermill":{"duration":0.803409,"end_time":"2021-05-10T17:56:31.011766","exception":false,"start_time":"2021-05-10T17:56:30.208357","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/"},"id":"5P_SjPYlfwQw","executionInfo":{"status":"ok","timestamp":1621241890544,"user_tz":-180,"elapsed":1748,"user":{"displayName":"Артур Соболь","photoUrl":"","userId":"13392954308681420968"}},"outputId":"22d85e30-a2a7-4b06-b297-57ec1086cd71"},"source":["model = LSTM_model()\n","model.summary()\n","model.compile(optimizer='adam', \n","              loss='mean_squared_error',\n","              metrics=['acc'])"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","lstm_3 (LSTM)                (None, 60, 50)            10400     \n","_________________________________________________________________\n","dropout_3 (Dropout)          (None, 60, 50)            0         \n","_________________________________________________________________\n","lstm_4 (LSTM)                (None, 60, 50)            20200     \n","_________________________________________________________________\n","dropout_4 (Dropout)          (None, 60, 50)            0         \n","_________________________________________________________________\n","lstm_5 (LSTM)                (None, 50)                20200     \n","_________________________________________________________________\n","dropout_5 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 51        \n","=================================================================\n","Total params: 50,851\n","Trainable params: 50,851\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:56:31.046746Z","iopub.status.busy":"2021-05-10T17:56:31.046153Z","iopub.status.idle":"2021-05-10T17:58:04.270720Z","shell.execute_reply":"2021-05-10T17:58:04.270259Z"},"papermill":{"duration":93.243165,"end_time":"2021-05-10T17:58:04.270876","exception":false,"start_time":"2021-05-10T17:56:31.027711","status":"completed"},"tags":[],"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"D5WfRqakfwQy","executionInfo":{"status":"error","timestamp":1621241929643,"user_tz":-180,"elapsed":8099,"user":{"displayName":"Артур Соболь","photoUrl":"","userId":"13392954308681420968"}},"outputId":"814d07a8-7f36-4fc3-b528-f4e477c39b5a"},"source":["# Define callbacks\n","\n","# Save weights only for best model\n","checkpointer = ModelCheckpoint(filepath = 'weights_best.hdf5', \n","                               verbose = 2, \n","                               save_best_only = True)\n","\n","model.fit(x_train, \n","          y_train, \n","          epochs=25, \n","          batch_size = 32,\n","          callbacks = [checkpointer],\n","          validation_data=)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Epoch 1/25\n","51/51 [==============================] - 4s 85ms/step - loss: 0.0032 - acc: 0.0012\n","WARNING:tensorflow:Can save best model only with val_acc available, skipping.\n","Epoch 2/25\n","39/51 [=====================>........] - ETA: 1s - loss: 0.0036 - acc: 0.0016"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-6912dc157e9d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m           \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m25\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m           \u001b[0mbatch_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m           callbacks = [checkpointer])\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"papermill":{"duration":0.335473,"end_time":"2021-05-10T17:58:05.527665","exception":false,"start_time":"2021-05-10T17:58:05.192192","status":"completed"},"tags":[],"id":"HsLN3p6jfwQz"},"source":["# <div id=\"chap5\">5. Predictions"]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:58:06.142878Z","iopub.status.busy":"2021-05-10T17:58:06.142306Z","iopub.status.idle":"2021-05-10T17:58:08.041564Z","shell.execute_reply":"2021-05-10T17:58:08.040136Z"},"papermill":{"duration":2.211109,"end_time":"2021-05-10T17:58:08.041717","exception":false,"start_time":"2021-05-10T17:58:05.830608","status":"completed"},"tags":[],"id":"R-Sy0JyyfwQz"},"source":["# test model accuracy on existing data\n","test_data = load_data(company = 'FB',\n","                      start = dt.datetime(2019,1,1),\n","                      end = dt.datetime.now())\n","\n","actual_prices = test_data['Close'].values\n","\n","total_dataset = pd.concat((data['Close'], test_data['Close']), axis=0)\n","\n","model_inputs = total_dataset[len(total_dataset) - len(test_data) - prediction_days:].values\n","model_inputs = model_inputs.reshape(-1,1)\n","model_inputs = scaler.transform(model_inputs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:58:08.656054Z","iopub.status.busy":"2021-05-10T17:58:08.655167Z","iopub.status.idle":"2021-05-10T17:58:09.894185Z","shell.execute_reply":"2021-05-10T17:58:09.893604Z"},"papermill":{"duration":1.548111,"end_time":"2021-05-10T17:58:09.894335","exception":false,"start_time":"2021-05-10T17:58:08.346224","status":"completed"},"tags":[],"id":"hLyjFBTrfwQz"},"source":["x_test = []\n","for x in range(prediction_days, len(model_inputs)):\n","    x_test.append(model_inputs[x-prediction_days:x, 0])\n","\n","x_test = np.array(x_test)\n","x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1] ,1))\n","\n","predicted_prices = model.predict(x_test)\n","predicted_prices = scaler.inverse_transform(predicted_prices)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:58:10.522848Z","iopub.status.busy":"2021-05-10T17:58:10.521061Z","iopub.status.idle":"2021-05-10T17:58:10.703021Z","shell.execute_reply":"2021-05-10T17:58:10.702447Z"},"papermill":{"duration":0.504008,"end_time":"2021-05-10T17:58:10.703173","exception":false,"start_time":"2021-05-10T17:58:10.199165","status":"completed"},"tags":[],"id":"UiYqpGsFfwQz","outputId":"786368e4-0f53-46dc-9e52-3e887e09c524"},"source":["plt.plot(actual_prices, color='black', label=f\"Actual {company} price\")\n","plt.plot(predicted_prices, color= 'green', label=f\"predicted {company} price\")\n","plt.title(f\"{company} share price\")\n","plt.xlabel(\"time\")\n","plt.ylabel(f\"{company} share price\")\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:58:11.330186Z","iopub.status.busy":"2021-05-10T17:58:11.329346Z","iopub.status.idle":"2021-05-10T17:58:11.334190Z","shell.execute_reply":"2021-05-10T17:58:11.334712Z"},"papermill":{"duration":0.322181,"end_time":"2021-05-10T17:58:11.334863","exception":false,"start_time":"2021-05-10T17:58:11.012682","status":"completed"},"tags":[],"id":"02TG8T8UfwQ0"},"source":["# predicting next day\n","real_data = [model_inputs[len(model_inputs)+1 - prediction_days:len(model_inputs+1),0]]\n","real_data = np.array(real_data)\n","real_data = np.reshape(real_data, (real_data.shape[0], real_data.shape[1], 1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"execution":{"iopub.execute_input":"2021-05-10T17:58:11.958431Z","iopub.status.busy":"2021-05-10T17:58:11.957459Z","iopub.status.idle":"2021-05-10T17:58:12.901103Z","shell.execute_reply":"2021-05-10T17:58:12.901594Z"},"papermill":{"duration":1.258524,"end_time":"2021-05-10T17:58:12.901767","exception":false,"start_time":"2021-05-10T17:58:11.643243","status":"completed"},"tags":[],"id":"ggrbkZT8fwQ0","outputId":"8459215b-10b8-4550-bb0f-4c0837025f87"},"source":["prediction = model.predict(real_data)\n","prediction = scaler.inverse_transform(prediction)\n","print(f\"prediction: {prediction}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["prediction: [[284.7712]]\n"],"name":"stdout"}]}]}